
/*******************************************************************************
 *
 * TRIQS: a Toolbox for Research in Interacting Quantum Systems
 *
 * Copyright (C) 2011 by M. Ferrero, O. Parcollet
 *
 * TRIQS is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * TRIQS is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * TRIQS. If not, see <http://www.gnu.org/licenses/>.
 *
 ******************************************************************************/

#include "triqs/python_tools/python_interpreter.hpp"
#include <boost/mpi.hpp>

// Generated by makefile to declare the init routines of various modules.
#include "./main_includewrap.cpp"

#define AS_STRING(X) AS_STRING2(X)
#define AS_STRING2(X) #X

using namespace std;

int main(int argc, char **argv)
{
 //includes all PyImport_AppendInittab command to make the interpreter aware of the new builtin modules.
 // this file is generated by the makefile, with basic pytriqs modules and the *selected* solvers
#include "./main_appendinittab.cpp"

 boost::mpi::environment env(argc, argv);
 boost::mpi::communicator world;

 // init the interpreter
 triqs::python_tools::python_interpreter P(argc, argv, AS_STRING(PYTHONPATH_ADD));
 //if (world.rank() == 0)  P.print_greeting();
 string PY_MODULES_ = "import sys; sys.additional_builtin_modules = '" + string(AS_STRING(MODULE_LIST)) + "'.split()";
 P<< PY_MODULES_ <<   
 "import pytriqs.Base.Utility.MPI as MPI\n"
 "MPI.report( \"    with modules : %s\" %(sys.additional_builtin_modules),stderr=True)\n" 
  "MPI.report( 50*'-',stderr=True)\n";
 P.set_prompt("ipytriqs>>>"); 
 P.mainloop_ipython();

}
