from pytriqs_GF import GF_Statistic,GF_Type,TailGF,MeshGF
from pytriqs.Base.Utility.myUtils import *
from pytriqs.Base.Plot.protocol import clip_X
import numpy
from types import *
from ArrayViewWithIndexConverter import ArrayViewWithIndexConverter,_IndicesConverter
import GF_Initializers
import lazy_expressions,Descriptors

def inverse(x):
    if isinstance(x,(lazy_expressions.lazy_expr,lazy_expressions.lazy_expr_terminal)) : 
        return lazy_expressions.lazy_function("inverse", inverse) (x)
    assert hasattr(x,'invert') and hasattr(x,'copy')
    cop = x.copy() 
    cop.invert()
    return cop

class _Plot_Wrapper_Partial_Reduce : 
    """ Internal Use"""
    def __init__(self, obj,  **opt) : 
        self.obj, self.opt = obj,opt
    def _plot_(self,Options) : 
        Options.update(self.opt)
        return self.obj._plot_(Options)

class _GFBloc_Base:
    """ 
       INTERNAL USE
    """
    hdf5_scheme_doc = {'data' : "The array of data"}
    def _init_base__(self,d) :
        if 'Indices' in d: 
            indL = list(d['Indices'])
            indR = indL
        elif 'IndicesL' in d and 'IndicesR' in d :
            indL,indR = list(d['IndicesL']),list(d['IndicesR'])
        else : 
            raise ValueError, "No Indices !!"
        
        self._myIndicesGFBlocL = _IndicesConverter(indL)
        self._myIndicesGFBlocR = _IndicesConverter(indR)
        Mesh = d['Mesh']
        Data = d['Data'] if 'Data' in d else None
        Tail = d['Tail'] if 'Tail' in d else  TailGF(-2,10,indL,indR)
        self.Name = d['Name'] if 'Name' in d else ''
        self.Note=  d['Note'] if 'Note' in d else ''

        # clean d of the used parameters
        for a in ['Indices','IndicesL','IndicesR','Data','Tail','Mesh','Name','Note']:
            if a in d : del d[a]
        if d : 
            for k in d : 
                raise ValueError,"Parameter %s unknown"%k
        self._param_for_cons = (indL,indR, Data,Mesh,Tail)

    def __get_Indices(self) : 
	"""A generator of the indices"""
        if self._IndicesL != self._IndicesR : raise RuntimeError, "Indices R and L are not the same. I can not give you the Indices"
        for ind in self._IndicesL: 
            yield ind

    def __get_IndicesL(self) : 
	"""A generator of the left indices"""
        for ind in self._IndicesL: yield ind

    def __get_IndicesR(self) : 
	"""A generator of the right indices"""
        for ind in self._IndicesR: yield ind

    Indices = property(__get_Indices)
    IndicesL = property(__get_IndicesL)
    IndicesR = property(__get_IndicesR)
            
    def arrayWithMyIndices(self) :
        """   """
        return ArrayViewWithIndexConverter(A = numpy.zeros((self.N1,self.N2), dtype = numpy.complex_),
                                           IndicesL = self._IndicesL, IndicesR = self._IndicesR)
   #---------------------------------------------------------------------------------
    
    def __getitem__(self,key):
        """Key is a tuple of index (n1,n2) as defined at construction"""
        if len(key) !=2 : raise ValueError, "[ ] must be given two arguments"
        try :
            sl1 = self._myIndicesGFBlocL.convertToNumpyIndex(key[0])
        except IndexError, ValueError:
	    raise IndexError, "Indices %s incorrect. Indices are %s"%(key[0],list(self._IndicesL))

        try :
            sl2 = self._myIndicesGFBlocR.convertToNumpyIndex(key[1])
        except IndexError, ValueError:
	    raise IndexError, "Indices %s incorrect. Indices are %s"%(key[1],list(self._IndicesR))

        return self.__class__(IndicesL = self._IndicesL[sl1],
                              IndicesR = self._IndicesR[sl2],
                              Name = self.Name,
                              Mesh = self.mesh,
                              Data = self._data.array[sl1,sl2,:],
                              Tail = TailGF(self._tail,sl1,sl2))

    def __setitem__(self,key,val):
        g = self.__getitem__(key)
        g <<= val
 
    #-----------------------------------------------------

    def copy (self) : 
        new_g = self.__class__(IndicesL = self._IndicesL,
                               IndicesR = self._IndicesR,
                               Mesh = self.mesh,
                               Name = self.Name, Note = self.Note)
        new_g._tail.copyFrom(self._tail)
        new_g._data.array[:,:,:] = self._data.array[:,:,:]
        return new_g

    #-----------------------------------------------------

    def __reduce__(self):
        return call_factory_from_dict, (self.__class__,self.__reduce_to_dict__())
        
    def __reduce_to_dict__(self):
        indL = repr(tuple(self.IndicesL))
        indR = repr(tuple(self.IndicesR))
        assert(eval(indL)==tuple(self.IndicesL))
        assert(eval(indR)==tuple(self.IndicesR))
        return {'IndicesL' : indL,
                'IndicesR' : indR,
                'Data' : self._data.array,
                'Mesh' : self.mesh,
                'Tail' : self._tail,
                'Name' : self.Name,
                'Note' : self.Note }

    # a classmethod receives the names of the class instead of self.
    @classmethod
    def __factory_from_dict__(CLS,value):
        if ('Indices' in value.keys()) and (type(value['Indices']) == type('')):
          value['Indices'] = eval(value['Indices'])
        if ('IndicesL' in value.keys()) and (type(value['IndicesL']) == type('')):
          value['IndicesL'] = eval(value['IndicesL'])
        if ('IndicesR' in value.keys()) and (type(value['IndicesR']) == type('')):
          value['IndicesR'] = eval(value['IndicesR'])
        return CLS(**value)
 
    #-------------------------------------------------

    def __le__(self, other) :
        """ Forbidden : to avoid typo with <<="""
        raise RuntimeError, " Operator <= not defined "
        
    def __ilshift__(self, A): 
        """ A can be two things :
          * G <<= any_GF_Initializers will init the GFBloc with the initializer
          * G <<= g2 where g2 is a GFBloc will copy g2 into self
        """
        if isinstance(A, GF_Initializers.Base) : #normal case
            A(self)
        elif isinstance(A, self.__class__) : 
            if self is not A : self.copyFrom(A) # otherwise it is useless AND does not work !!
        elif isinstance(A, lazy_expressions.lazy_expr) : # A is a lazy_expression made of GF, scalars, descriptors 
            A2= Descriptors.convert_scalar_to_Const(A)
            def e_t (x) : 
                if not isinstance(x, Descriptors.Base) : return x
                tmp = self.copy()
                x(tmp)
                return tmp
            self.copyFrom ( lazy_expressions.eval_lazy_expr(e_t, A2) )
        elif isinstance(A, lazy_expressions.lazy_expr_terminal) : #e.g. g<<= SemiCircular (...) 
            self <<= lazy_expressions.lazy_expr(A)
        elif Descriptors.is_scalar(A) : #in the case it is a scalar .... 
            self <<= lazy_expressions.lazy_expr(A)
        else :
            raise RuntimeError, " GF Block : <<= operator : RHS not understood"
        return self

   #-------------------------------------------------

    def __repr__(self) : 
	return """%s %s :  Beta = %.3f; IndicesL = %s, IndicesR = %s """%(self.__class__.__name__, self.Name,
          self.Beta, [x for x in self.IndicesL], [x for x in self.IndicesR])

    #-------------------------------------------------

    def __iter__(self) :
	for i in self._IndicesL : 
	    for j in self._IndicesR :
                b =self[i,j]
		b.Name = "%s_%s_%s"%(self.Name if hasattr(self,'Name') else '',i,j)
		yield i,j,b

    #-----------------------------------------------------
 
    def __add__(self,y):
        c= self.copy()
        c+=y
        return c

    def __sub__(self,y):
        c= self.copy()
        c-=y
        return c

    def __mul__(self,y):
        c= self.copy()
        c*=y
        return c

    def __rmul__(self,x): return self.__mul__(x)
    def __radd__(self,x): return self.__add__(x)
    def __rsub__(self,x): return self.__sub__(x)
   
    def __div__(self,y):
        c= self.copy()
        c/=y
        return c


    #-----------------------------------------------------

    def __get_real(self) : return _Plot_Wrapper_Partial_Reduce(self,RI='R')
    def __get_imag(self) : return _Plot_Wrapper_Partial_Reduce(self,RI='I')
    real = property(__get_real,None, doc = "Use self.real in a plot to plot only the real part")
    imag = property(__get_imag,None, doc = "Use self.imag in a plot to plot only the imag part")

    #-----------------------------------------------------

    def Delta(self) :
        """Computes Delta from self ...."""
        if self.mesh.TypeGF not in [GF_Type.Real_Frequency, GF_Type.Imaginary_Frequency] :
            raise RuntimeError, "Can not compute Delta for this GF"
        G0 = self if self._tail.OrderMin <=-1 else inverse(self)
        tmp = G0.copy()
        tmp <<= GF_Initializers.A_Omega_Plus_B(G0._tail[-1], G0._tail[0])
        tmp -= G0
        return tmp
        
      #-----------------------------------------------------

    def setFrom(self,F) : 
        """ Initialize the function from the function F, with no tail"""
        self <<= GF_Initializers.Function( F, None)

    #-----------------------------------------------------

    def _plot_base (self, OptionsDict, xlabel, ylabel, r_and_i, X):
        """ Plot protocol. OptionsDict can contain : 
             * :param RI: 'R', 'I', '' [ default] 
             * :param x_window: (xmin,xmax) or None [default]
             * :param Name: a string [default ='']. If not '', it remplaces the name of the function just for this plot.
        """
        Name = OptionsDict.pop('Name', '' )  # consume it
        if Name : name_save, self.Name = self.Name, Name

        rx = OptionsDict.pop('x_window',None ) # consume it
        sl = clip_X (X, *rx) if rx else slice(len(X)) # the slice due to clip option x_window

        def mdic( prefix, f) : 
           return [{'Type' : "XY", 
                    'xlabel' : xlabel,
                    'ylabel' : ylabel (self.Name),
                    'xdata' : X[sl],
                    'label' : prefix + B.Name,
                    'ydata' : f( B._data.array[0,0,sl] ) } for (i,j,B) in self ] 
     
        if r_and_i : 
            res_R = mdic( 'Re ', lambda x : x.real)
            res_I = mdic( 'Im ', lambda x : x.imag)
            if Name : self.Name = name_save
            return { 'I' : res_I, 'R' : res_R, '' : res_R + res_I} [ OptionsDict.pop('RI','') ]
        else : 
            res = mdic( 'Re ', lambda x : x)
            if Name : self.Name = name_save
            return res 
 
#-----------------------------------------------------

from pytriqs.Base.Archive.HDF_Archive_Schemes import register_class
register_class (TailGF)
register_class (MeshGF)

        
