
# Includes
SET(TRIQS_INCLUDE @CMAKE_INSTALL_PREFIX@/include)

SET(TRIQS_INCLUDE_BOOST @BOOST_INCLUDE_DIR@)
SET(TRIQS_INCLUDE_MPI @TRIQS_INCLUDE_MPI@)
SET(TRIQS_INCLUDE_PYTHON @TRIQS_INCLUDE_PYTHON@)
SET(TRIQS_INCLUDE_HDF5 @HDF5_INCLUDE_DIR@)
SET(TRIQS_INCLUDE_FFTW @FFTW_INCLUDE_DIR@)
SET(TRIQS_INCLUDE_GMP @GMP_INCLUDE_DIR@)
SET(TRIQS_INCLUDE_GSL @GSL_INCLUDE_DIR@)

# Libraries
SET(TRIQS_LIBRARY -L@CMAKE_INSTALL_PREFIX@/lib -ltriqs)  

SET(TRIQS_LIBRARY_BOOST @BOOST_LIBRARY@)
SET(TRIQS_LIBRARY_MPI @TRIQS_LIBRARY_MPI@)
SET(TRIQS_LIBRARY_PYTHON @TRIQS_LIBRARY_PYTHON@)
SET(TRIQS_LIBRARY_HDF5  @HDF5_LIBRARIES@)
SET(TRIQS_LIBRARY_LAPACK @TRIQS_LIBRARY_LAPACK@)
SET(TRIQS_LIBRARY_FFTW @FFTW_LIBRARIES@)
SET(TRIQS_LIBRARY_GMP @GMP_LIBRARIES@ @GMPXX_LIBRARIES@)
SET(TRIQS_LIBRARY_GSL @GSL_LIBRARIES@)

# for people who want to quickly add everything TRIQS has detected...
SET(TRIQS_LIBRARY_ALL ${TRIQS_LIBRARY} ${TRIQS_LIBRARY_BOOST} ${TRIQS_LIBRARY_PYTHON} ${TRIQS_LIBRARY_MPI} ${TRIQS_LIBRARY_HDF5} ${TRIQS_LIBRARY_LAPACK} ${TRIQS_LIBRARY_FFTW} ${TRIQS_LIBRARY_GMP} ${TRIQS_LIBRARY_GSL} )
SET(TRIQS_INCLUDE_ALL ${TRIQS_INCLUDE} ${TRIQS_INCLUDE_BOOST} ${TRIQS_INCLUDE_PYTHON} ${TRIQS_INCLUDE_MPI} ${TRIQS_INCLUDE_HDF5} ${TRIQS_INCLUDE_LAPACK} ${TRIQS_INCLUDE_FFTW} ${TRIQS_INCLUDE_GMP} ${TRIQS_INCLUDE_GSL} )

# Python specific stuff
SET (TRIQS_PYTHON_INTERPRETER @PYTHON_INTERPRETER@)
 
# Fix the rpath
SET(CMAKE_INSTALL_RPATH "@CMAKE_INSTALL_PREFIX@/lib")
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)

MESSAGE(STATUS "TRIQS : Adding C++11 compilation flags -std=c++11 ")
add_definitions( -std=c++0x) 

# Check compiler
if (NOT CMAKE_CXX_COMPILER STREQUAL "@CMAKE_CXX_COMPILER@" )
 MESSAGE(FATAL_ERROR "You should use the same compiler as the one used to compile TRIQS")
endif()

IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
 if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
  SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++ ")
  MESSAGE(STATUS "TRIQS : Adding C++11 compilation flags for Os X:  -stdlib=libc++ ")
 else ()
  MESSAGE( WARNING "${line_of_star}You are on Os X but your are not using clang. This is NOT recommended...${line_of_star}") 
 endif ()
ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

# This function add the target to build a python module
#
# NickName =  
# ModuleName = the python name of the module 
# ModuleDest = path in the pytriqs tree [ FOR INSTALLATION ONLY] IMPROVE MAKE THIS OPTIONAL (for test) 
macro (cython_module NickName ModuleName)
 MESSAGE(STATUS "TRIQS : Preparing cython module  ${NickName} ${TRIQS_PYTHON_INTERPRETER} ")
 get_filename_component(CYTHON_EXECUTABLE_PATH ${TRIQS_PYTHON_INTERPRETER} PATH)
 SET(CYTHON_EXECUTABLE ${CYTHON_EXECUTABLE_PATH}/cython CACHE STRING "Path to the cython executable")
 SET(cython_src ${CMAKE_CURRENT_SOURCE_DIR}/${ModuleName}.pyx )
 FILE(GLOB all_pyx_src RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.pyx *.pxd )
 SET(cython_wrap  ${CMAKE_CURRENT_BINARY_DIR}/wrap_${NickName}_by_cython.cpp)
 add_custom_command (OUTPUT ${cython_wrap} DEPENDS ${all_pyx_src} COMMAND ${CYTHON_EXECUTABLE} ${cython_src} -I ${CMAKE_CURRENT_SOURCE_DIR}/ -I${TRIQS_PATH}/include/pytriqs/  -I${TRIQS_PATH}/include/ -X embedsignature=True --cplus -o ${cython_wrap}  )
 add_custom_target(cython_${NickName} ALL DEPENDS ${cython_wrap})

 add_library(${ModuleName} MODULE ${cython_wrap}  )
 set_target_properties(${ModuleName}  PROPERTIES PREFIX "") #eliminate the lib in front of the module name 
 target_link_libraries(${ModuleName} ${TRIQS_LINK_LIBS} triqs)
 if (${ARGN} MATCHES "")
   install (TARGETS ${ModuleName} DESTINATION ${TRIQS_PYTHON_LIB_DEST}/${ARGN}  )
 endif (${ARGN} MATCHES "")
 set_property (GLOBAL APPEND PROPERTY DEPENDANCE_TO_ADD triqs_${NickName} )

endmacro (cython_module)



