#ifndef EXPRESSION_FOLD_H
#define EXPRESSION_FOLD_H 

#include <boost/utility/enable_if.hpp>
#include "../matrix.hpp"
#include "../array.hpp"
#include "./make_function_macros.hpp"

namespace triqs_arrays {

 namespace result_of { template<class F, typename A> struct fold { typedef typename  A::value_type  type;};}

 namespace Expression {

  namespace details { 

   template<class F, typename A>
    struct fold_func_adaptor { 
     F f;A a;
     fold_func_adaptor(F f_, A a_):f(f_),a(a_) {}
     template<class KT> void operator()(A const & b, KT &) { a = f(a,b);}
    };
  }

  template<class F, typename A>
   typename A::value_type fold ( F const & f, A & a, typename A::value_type init = typename A::value_type() ) { 
    details::fold_func_adaptor<F,typename A::value_type> func(f,init);
    foreach(boost::ref(func),a);
    return func.a;
   }

#define ARRAY_EXPRESSION_FOLD_CALLABLE_OBJECT(Name,OBJ,init) \
  template<class T> typename boost::enable_if<has_immutable_array_interface<T>,typename result_of::fold<OBJ,T>::type >::type\
  Name(T const & x) { return Expression::fold( OBJ(), x, init); }

#define ARRAY_EXPRESSION_FOLD_FUNCTION(Name,F,init) ARRAY_EXPRESSION_MAKE_FUNCTION2(Name,F); ARRAY_EXPRESSION_FOLD_CALLABLE_OBJECT(Name,Name##_impl,init) 


 } // Expression
} // namespace triqs_arrays 
#endif

