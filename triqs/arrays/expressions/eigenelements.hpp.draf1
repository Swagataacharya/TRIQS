#ifndef TRIQS_ARRAY_EIGENELEMENTS_H
#define TRIQS_ARRAY_EIGENELEMENTS_H

#include <boost/type_traits/is_same.hpp>
#include <boost/typeof/typeof.hpp>
#include <boost/utility/enable_if.hpp>
#include "../matrix.hpp"
#include "../vector.hpp"
#include <boost/numeric/bindings/lapack/driver/syev.hpp>
#include <boost/numeric/bindings/lapack/driver/heev.hpp>

namespace triqs_arrays { 
 namespace Expression { namespace details { template<typename A> struct eigenelements_impl; }} // impl below

 namespace result_of { 
  template<typename A> struct eigenelements {  
   static_assert( (is_matrix_or_view<A>::value), "eigenelements : the argument must be a matrix"); 
   typedef Expression::details::eigenelements_impl<A> type;
  }; 
 }

 namespace Expression { 

  template<typename A> 
   typename result_of::eigenelements<A>::type eigenelements (A const & a) { 
    return details::eigenelements_impl<A>(a,true); 
   }

  namespace details { //------------- IMPLEMENTATION -----------------------------------

   template<typename A>
    class eigenelements_impl 
    {
     public:
      typedef typename A::value_type value_type;
      typedef typename A::domain_type domain_type;
      A const & a; 

     private:
      typedef typename A::non_view_type matrix_type;
      typedef typename A::view_type matrix_view_type;
      mutable triqs_arrays::vector<value_type> ev;
      mutable bool init;
      mutable matrix_type e_vec;
      const bool Compute_Eigenvectors;
      void compute() const { 
       if (init) return;   
       char job = (Compute_Eigenvectors ? 'V' : 'N');
       int info = boost::numeric::bindings::lapack::syev(job,e_vec,ev);
       init =true;
      }

     public:
      eigenelements_impl( A const & a_, bool Compute_Eigenvectors_):
       a(a_),ev(a.dim0()),e_vec(a),Compute_Eigenvectors(Compute_Eigenvectors_),init(false){ Check::is_square_matrix(a,"EigenElements");}
      triqs_arrays::vector_view<value_type> values() const { compute(); return ev;}
      matrix_view_type vectors() const { compute(); return e_vec;}
    };

   template<typename A> 
    std::ostream & operator<<(std::ostream & out, eigenelements_impl<A> const & x){ return out<<"eigenelements("<<x.a<<")";}
  }
 } // Expression::details
} // namespace triqs_arrays 

#endif

